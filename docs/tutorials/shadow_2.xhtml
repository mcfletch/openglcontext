<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta content="text/html; charset=utf-8" http-equiv="content-type" />
<title>Depth-map Shadows: Shadows in a Frame Buffer Object</title>
    <link href="./tutorial.css" type="text/css" rel="stylesheet" />
</head>
<body>
<table width="100%" class="navtable"><thead>
	<tr>
		<td width="8em;"></td><th align="center"><a href="index.xhtml">OpenGLContext Python tutorials</a></th><td width="8em;"></td>
	</tr>
	<tr>
	<td><a href="shadow_1.xhtml">Previous</a></td>
	<td align="center">Depth-map Shadows: Shadows in a Frame Buffer Object</td>
	<td align="right"><a href="index.xhtml">Index</a></td>
	</tr>
</thead></table>
	<div class="code-sample">#! /usr/bin/env python
</div>
	<div class="commentary">
	<h1 class="title">Shadows in a Frame Buffer Object</h1>
	<div class="paragraph">
	<img src="shadow_2.py-screen-0001.png" alt="Screenshot" class=" wiki" />
</div>
	<div class="paragraph">In this tutorial, we will:</div>
	<ul class="">
	<li class="">subclass our previous shadow tutorial code </li>
	<li class="">use Frame Buffer Objects (FBO) to render the depth-texture </li>
	<li class="">render to a texture larger than the screen-size</li>
</ul>
	<div class="paragraph">This tutorial is a minor revision of our previous shadow tutorial,
the only change is to add off-screen rendering of the depth-texture 
rather than rendering on the back-buffer of the screen.
</div>
</div>
	<div class="code-sample">import OpenGL,sys,os,traceback
</div>
	<div class="commentary">
	<div class="paragraph">Import the previous tutorial as BaseContext</div>
</div>
	<div class="code-sample">from shadow_1 import TestContext as BaseContext
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GL.ARB.depth_texture import *
from OpenGL.GL.ARB.shadow import *
</div>
	<div class="commentary">
	<div class="paragraph">Import the PyOpenGL convenience wrappers for the FrameBufferObject
extension(s) we're going to use.  (Requires PyOpenGL 3.0.1b2 or above).</div>
</div>
	<div class="code-sample">from OpenGL.GL.framebufferobjects import *
class TestContext( BaseContext ):
    """Shadow rendering tutorial code"""
    def OnInit( self ):
        """Scene set up and initial processing"""
        super( TestContext, self ).OnInit()
</div>
	<div class="commentary">
	<div class="paragraph">We'll use the slightly more idiomatic "check if the entry 
        point is true" way of checking for the extension.  The alternates
        in the convenience wrapper will report true if there is any 
        implementation of the function.</div>
</div>
	<div class="code-sample">        if not glBindFramebuffer:
            print 'Missing required extensions!'
            sys.exit( testingcontext.REQUIRED_EXTENSION_MISSING )
</div>
	<div class="commentary">
	<div class="paragraph">Decide how big our depth-texture should be...</div>
</div>
	<div class="code-sample">        self.shadowMapSize = min(
            (
                glGetIntegerv( GL_MAX_TEXTURE_SIZE ),
                2048,
            )
        )
        if self.shadowMapSize &lt; 256:
            print 'Warning: your hardware only supports extremely small textures!'
        print 'Using shadow map of %sx%s pixels'%( 
            self.shadowMapSize,self.shadowMapSize 
        )
</div>
	<div class="commentary">
	<div class="paragraph">We override this default in the init function.</div>
</div>
	<div class="code-sample">    shadowMapSize = 2048
</div>
	<div class="commentary">
	<div class="paragraph">Should you wish to experiment with different filtering functions,
    we'll parameterize the filtering operation here.</div>
</div>
	<div class="code-sample">    FILTER_TYPE = GL_NEAREST 
    def setupShadowContext( self,light=None, mode=None, textureKey="" ):
        """Create a shadow-rendering context/texture"""
        shadowMapSize = self.shadowMapSize
</div>
	<div class="commentary">
	<div class="paragraph">As with the previous tutorial, we want to cache our texture (and FBO),
        so we check to see if the values have already been set up.</div>
</div>
	<div class="code-sample">        key = self.textureCacheKey+textureKey
        token = mode.cache.getData(light,key=key)
        if not token:
</div>
	<div class="commentary">
	<div class="paragraph">A cache miss, so we need to do the setup.</div>
</div>
	<div class="code-sample">            fbo = glGenFramebuffers(1)
</div>
	<div class="commentary">
	<div class="paragraph">It has to be bound to configure it.</div>
</div>
	<div class="code-sample">            glBindFramebuffer(GL_FRAMEBUFFER, fbo )
</div>
	<div class="commentary">
	<div class="paragraph">The texture itself is the same as the last tutorial.</div>
</div>
	<div class="code-sample">            texture = glGenTextures( 1 )
            glBindTexture( GL_TEXTURE_2D, texture )
            glTexImage2D( 
                GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT, 
                shadowMapSize, shadowMapSize, 0,
                GL_DEPTH_COMPONENT, GL_UNSIGNED_BYTE, None
            )
</div>
	<div class="commentary">
	<div class="paragraph">We attach the texture to the FBO's depth attachment point.  There 
            is also a combined depth-stencil attachment point when certain 
            extensions are available.  We don't actually need a stencil buffer 
            just now, so we can ignore that.</div>
	<div class="paragraph">The final argument is the "mip-map-level" of the texture,
which currently always must be 0.
</div>
</div>
	<div class="code-sample">            glFramebufferTexture2D(
                GL_FRAMEBUFFER, 
                GL_DEPTH_ATTACHMENT, 
                GL_TEXTURE_2D, 
                texture, 
                0 #mip-map level...
            )
            holder = mode.cache.holder( 
                light,(fbo,texture),key=key
            )
        else:
</div>
	<div class="commentary">
	<div class="paragraph">We've already got the FBO with its colour buffer, just bind to 
            render into it.</div>
</div>
	<div class="code-sample">            fbo,texture = token
            glBindFramebuffer(GL_FRAMEBUFFER, fbo )
</div>
	<div class="commentary">
	<div class="paragraph">Make the texture current to configure parameters.</div>
</div>
	<div class="code-sample">            glBindTexture( GL_TEXTURE_2D, texture )
</div>
	<div class="commentary">
	<div class="paragraph">Unlike in the previous tutorial, we now *know* this is a 
        valid size for the viewport in the off-screen context.</div>
</div>
	<div class="code-sample">        glViewport(0,0,shadowMapSize,shadowMapSize)
</div>
	<div class="commentary">
	<div class="paragraph">We use the same "nearest" filtering as before</div>
</div>
	<div class="code-sample">        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, self.FILTER_TYPE)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP)
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP)
</div>
	<div class="commentary">
	<div class="paragraph">Disable drawing to the colour buffers entirely.  Without this our 
        framebuffer would be incomplete, as it would not have any colour buffer 
        into which to render.</div>
</div>
	<div class="code-sample">        glDrawBuffer( GL_NONE )
</div>
	<div class="commentary">
	<div class="paragraph">This function in the OpenGL.GL.framebufferobjects wrapper will 
        raise an OpenGL.error.GLError if the FBO is not properly configured.</div>
</div>
	<div class="code-sample">        try:
            checkFramebufferStatus( )
        except Exception, err:
            traceback.print_exc()
            import os
            os._exit(1)
</div>
	<div class="commentary">
	<div class="paragraph">Un-bind the texture so that regular rendering isn't trying to 
        lookup a texture in our depth-buffer-bound texture.</div>
</div>
	<div class="code-sample">        glBindTexture( GL_TEXTURE_2D, 0 )
</div>
	<div class="commentary">
	<div class="paragraph">Clear the depth buffer (texture) on each pass.  Our previous 
        tutorial didn't need to do this here because the back-buffer was 
        shared with the regular rendering pass and the OpenGLContext renderer
        had already called glClear() during it's regular context setup.
</div>
</div>
	<div class="code-sample">        glClear(GL_DEPTH_BUFFER_BIT)
        return texture
    def closeShadowContext( self, texture, textureKey="" ):
        """Close our shadow-rendering context/texture"""
</div>
	<div class="commentary">
	<div class="paragraph">This is a very simple function now, we just disable the FBO,
        and restore the draw buffer to the regular "back" buffer.</div>
</div>
	<div class="code-sample">        glBindFramebuffer(GL_FRAMEBUFFER, 0 )
        glDrawBuffer( GL_BACK )
        return texture
if __name__ == "__main__":
</div>
	<div class="commentary">
	<div class="paragraph">Our display size is now irrelevant to our rendering algorithm, so we 
    won't bother specifying a size.</div>
</div>
	<div class="code-sample">    TestContext.ContextMainLoop(
        depthBuffer = 24,
    )
</div>
	<div class="commentary">
	<div class="paragraph">There are a number of possible next steps to take:</div>
	<ul class="">
	<li class="">create cube-maps for point light sources</li>
	<li class="">create multiple depth maps which cover successively farther "tranches"   of the camera view frustum to produce higher-resolution shadows </li>
	<li class="">use shaders to combine the opaque and diffuse/specular passes into a   single rendering pass </li>
	<li class="">use shaders to do "Percentage Closer Filtering" on the shadow-map values   in order to antialias the shadow edges.</li>
</ul>
</div>
<div class="source-reference">This code-walkthrough tutorial is generated from the shadow_2.py script in the 
OpenGLContext source distribution.</div>
<table width="100%" class="navtable"><thead>
	<tr>
		<td width="8em;"></td><th align="center"><a href="index.xhtml">OpenGLContext Python tutorials</a></th><td width="8em;"></td>
	</tr>
	<tr>
	<td><a href="shadow_1.xhtml">Previous</a></td>
	<td align="center">Depth-map Shadows: Shadows in a Frame Buffer Object</td>
	<td align="right"><a href="index.xhtml">Index</a></td>
	</tr>
	<tr class="meta-links">
		<td colspan="3">
		<a href="../documentation.html"><img src="../images/doc_icon.gif" alt="Documentation" style="border: 0px solid ; width: 32px; height: 32px;" title="" /></a> 
		<a href="http://pyopengl.sourceforge.net/context/"><img src="../images/context_logo_icon.png" alt="OpenGLContext" style="border: 0px solid ; width: 32px; height: 32px;" title="" /></a> 
		<a href="http://pyopengl.sourceforge.net/"><img src="../images/pyopengl_icon.jpg" alt="PyOpenGL" style="border: 0px solid ; width: 32px; height: 32px;" title="" /></a>
		<a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=5988&amp;type=1" style="border: 0px solid ; width: 88px; height: 31px;" alt="SourceForge" title="" /></a>
		</td>
	</tr>
</thead></table>
</body>
</html>