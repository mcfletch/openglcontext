<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta content="text/html; charset=utf-8" http-equiv="content-type" />
<title>NeHe Translations: Texture Mapping (NeHe 6)</title>
    <link href="./tutorial.css" type="text/css" rel="stylesheet" />
</head>
<body>
<table width="100%" class="navtable"><thead>
	<tr>
		<td width="8em;"></td><th align="center"><a href="index.xhtml">OpenGLContext Python tutorials</a></th><td width="8em;"></td>
	</tr>
	<tr>
	<td><a href="nehe5.xhtml">Previous</a></td>
	<td align="center">NeHe Translations: Texture Mapping (NeHe 6)</td>
	<td align="right"><a href="nehe7.xhtml">Next</a></td>
	</tr>
</thead></table>
	<div class="code-sample">#! /usr/bin/env python
</div>
	<div class="commentary">
	<h1 class="title">Texture Mapping (NeHe 6)</h1>
	<div class="paragraph">
	<img src="nehe6.py-screen-0001.png" alt="Screenshot" class=" wiki" />
</div>
	<div class="paragraph">
This tutorial is based on the 
	<a href="http://nehe.gamedev.net/data/lessons/lesson.asp?lesson=06" class="">NeHe6 tutorial</a>
	 by Jeff Molofee and assumes that you are reading along 
with the tutorial, so that only changes from the tutorial are noted 
here.
</div>
</div>
	<div class="code-sample">from OpenGLContext import testingcontext
BaseContext, MainFunction = testingcontext.getInteractive()
from OpenGL.GL import *
import time
from Image import open
class TestContext( BaseContext ):
	"""NeHe 6 Demo"""
	initialPosition = (0,0,0) # set initial camera position, tutorial does the re-positioning
</div>
	<div class="commentary">
	<div class="paragraph">OnInit is called by the Context class after initialization
	of the context has completed, and before any rendering is
	attempted.  Within this method, you'll generally perform
	your global setup tasks.</div>
</div>
	<div class="code-sample">	def OnInit( self ):
		"""Load the image on initial load of the application"""
		self.imageID = self.loadImage ()
</div>
	<div class="commentary">
	<div class="paragraph">We are going to use the Python Imaging Library (PIL) for
loading images, something which is obviously not seen
in the original tutorial.</div>
	<div class="paragraph">This method combines all of the functionality required to
load the image with PIL, convert it to a format compatible
with PyOpenGL, generate the texture ID, and store the image
data under that texture ID.
</div>
</div>
	<div class="code-sample">	def loadImage( self, imageName = "nehe_wall.bmp" ):
		"""Load an image file as a 2D texture using PIL"""
</div>
	<div class="commentary">
	<div class="paragraph">PIL defines an "open" method which is Image specific!</div>
</div>
	<div class="code-sample">		im = open(imageName)
		try:
			ix, iy, image = im.size[0], im.size[1], im.tostring("raw", "RGBA", 0, -1)
		except SystemError:
			ix, iy, image = im.size[0], im.size[1], im.tostring("raw", "RGBX", 0, -1)
</div>
	<div class="commentary">
	<div class="paragraph">Generate a texture ID</div>
</div>
	<div class="code-sample">		ID = glGenTextures(1)
</div>
	<div class="commentary">
	<div class="paragraph">Make our new texture ID the current 2D texture</div>
</div>
	<div class="code-sample">		glBindTexture(GL_TEXTURE_2D, ID)
		glPixelStorei(GL_UNPACK_ALIGNMENT,1)
</div>
	<div class="commentary">
	<div class="paragraph">Copy the texture data into the current texture ID</div>
</div>
	<div class="code-sample">		glTexImage2D(
			GL_TEXTURE_2D, 0, 3, ix, iy, 0, 
			GL_RGBA, GL_UNSIGNED_BYTE, image
		)
</div>
	<div class="commentary">
	<div class="paragraph">Note that only the ID is returned, no reference to the image
		object or the string data is stored in user space, the data is 
		only present within the GL after this call exits.</div>
</div>
	<div class="code-sample">		return ID
	def Render( self, mode):
		"""Render scene geometry"""
		BaseContext.Render( self, mode )
		glDisable( GL_LIGHTING) # context lights by default
		glTranslatef(1.5,0.0,-6.0);
		glRotated( time.time()%(8.0)/8 * -360, 1,0,0)
		self.setupTexture()
		self.drawCube()
</div>
	<div class="commentary">
	<div class="paragraph">This method encapsulates the functions required to set up
	for textured rendering.  The original tutorial made these
	calls once for the entire program.  This organization makes
	more sense if you are likely to have multiple textures.
</div>
</div>
	<div class="code-sample">	def setupTexture( self ):
		"""Render-time texture environment setup"""
</div>
	<div class="commentary">
	<div class="paragraph">Configure the texture rendering parameters</div>
</div>
	<div class="code-sample">		glEnable(GL_TEXTURE_2D)
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
		glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_DECAL)
</div>
	<div class="commentary">
	<div class="paragraph">Re-select our texture, could use other generated textures
		if we had generated them earlier...</div>
</div>
	<div class="code-sample">		glBindTexture(GL_TEXTURE_2D, self.imageID)
</div>
	<div class="commentary">
	<div class="paragraph">Drawing the cube has changed slightly, because we now need 
	to specify the texture coordinates for each vertex. This is all 
	just taken from the original tutorial.</div>
</div>
	<div class="code-sample">	def drawCube( self ):
		"""Draw a cube with texture coordinates"""
		glBegin(GL_QUADS);
		glTexCoord2f(0.0, 0.0); glVertex3f(-1.0, -1.0,  1.0);
		glTexCoord2f(1.0, 0.0); glVertex3f( 1.0, -1.0,  1.0);
		glTexCoord2f(1.0, 1.0); glVertex3f( 1.0,  1.0,  1.0);
		glTexCoord2f(0.0, 1.0); glVertex3f(-1.0,  1.0,  1.0);
		glTexCoord2f(1.0, 0.0); glVertex3f(-1.0, -1.0, -1.0);
		glTexCoord2f(1.0, 1.0); glVertex3f(-1.0,  1.0, -1.0);
		glTexCoord2f(0.0, 1.0); glVertex3f( 1.0,  1.0, -1.0);
		glTexCoord2f(0.0, 0.0); glVertex3f( 1.0, -1.0, -1.0);
		glTexCoord2f(0.0, 1.0); glVertex3f(-1.0,  1.0, -1.0);
		glTexCoord2f(0.0, 0.0); glVertex3f(-1.0,  1.0,  1.0);
		glTexCoord2f(1.0, 0.0); glVertex3f( 1.0,  1.0,  1.0);
		glTexCoord2f(1.0, 1.0); glVertex3f( 1.0,  1.0, -1.0);
		glTexCoord2f(1.0, 1.0); glVertex3f(-1.0, -1.0, -1.0);
		glTexCoord2f(0.0, 1.0); glVertex3f( 1.0, -1.0, -1.0);
		glTexCoord2f(0.0, 0.0); glVertex3f( 1.0, -1.0,  1.0);
		glTexCoord2f(1.0, 0.0); glVertex3f(-1.0, -1.0,  1.0);
		glTexCoord2f(1.0, 0.0); glVertex3f( 1.0, -1.0, -1.0);
		glTexCoord2f(1.0, 1.0); glVertex3f( 1.0,  1.0, -1.0);
		glTexCoord2f(0.0, 1.0); glVertex3f( 1.0,  1.0,  1.0);
		glTexCoord2f(0.0, 0.0); glVertex3f( 1.0, -1.0,  1.0);
		glTexCoord2f(0.0, 0.0); glVertex3f(-1.0, -1.0, -1.0);
		glTexCoord2f(1.0, 0.0); glVertex3f(-1.0, -1.0,  1.0);
		glTexCoord2f(1.0, 1.0); glVertex3f(-1.0,  1.0,  1.0);
		glTexCoord2f(0.0, 1.0); glVertex3f(-1.0,  1.0, -1.0);
		glEnd()
	def OnIdle( self, ):
		"""Request refresh of the context whenever idle"""
		self.triggerRedraw(1)
		return 1
if __name__ == "__main__":
	MainFunction ( TestContext)
</div>
	<div class="commentary">
	<div class="paragraph">
Author: 
	<a href="http://nehe.gamedev.net" class="">Jeff Molofee (aka NeHe)</a>
</div>
	<div class="paragraph">COPYRIGHT AND DISCLAIMER: (c)2000 Jeff Molofee</div>
	<div class="paragraph">If you plan to put this program on your web page or a cdrom of
any sort, let me know via email, I'm curious to see where
it ends up :)</div>
	<div class="paragraph">If you use the code for your own projects please give me
credit, or mention my web site somewhere in your program 
or it's docs.
</div>
</div>
<table width="100%" class="navtable"><thead>
	<tr>
		<td width="8em;"></td><th align="center"><a href="index.xhtml">OpenGLContext Python tutorials</a></th><td width="8em;"></td>
	</tr>
	<tr>
	<td><a href="nehe5.xhtml">Previous</a></td>
	<td align="center">NeHe Translations: Texture Mapping (NeHe 6)</td>
	<td align="right"><a href="nehe7.xhtml">Next</a></td>
	</tr>
	<tr class="meta-links">
		<td colspan="3">
		<a href="../documentation.html"><img src="../images/doc_icon.gif" alt="Documentation" style="border: 0px solid ; width: 32px; height: 32px;" title="" /></a> 
		<a href="http://pyopengl.sourceforge.net/context/"><img src="../images/context_logo_icon.png" alt="OpenGLContext" style="border: 0px solid ; width: 32px; height: 32px;" title="" /></a> 
		<a href="http://pyopengl.sourceforge.net/"><img src="../images/pyopengl_icon.jpg" alt="PyOpenGL" style="border: 0px solid ; width: 32px; height: 32px;" title="" /></a>
		<a href="http://sourceforge.net"><img src="http://sourceforge.net/sflogo.php?group_id=5988&amp;type=1" style="border: 0px solid ; width: 88px; height: 31px;" alt="SourceForge" title="" /></a>
		</td>
	</tr>
</thead></table>
</body>
</html>